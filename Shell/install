#!/bin/bash

#
# Global Variables used throughout the Script
#
DEVICE="/dev/nvme0n1" # Temp, remove after testing, Dialog Script has a function for getting the device
if [[ $DEVICE == *"nvme"*]]; then   # Required because Linux appends a `p` for each Partition
    BOOT="${DEVICE}p1"
    SWAP="${DEVICE}p2"
    ROOT="${DEVICE}p3"
else                            # Unless it's Sata, or otherwise not nvme.
    BOOT="${DEVICE}1"
    SWAP="${DEVICE}2"
    ROOT="${DEVICE}3"
fi

EDITOR=""                       # nano, vi, vim, nvim, emacs, ed, etc; leave blank for none (Not recommended)
DESKTOP=""                      # KDE Plasma, Gnome, XFCE4, MATE, Cinnamon, etc; "None" for headless/server
HOSTNAME=""                     # What your computer is known as on networks
ROOT_PASSWORD=""                # The Root account password (Leave empty to disable *hardmode*)
USER_NAME=""                    # Your primary user account's name
USER_SUDO=false                 # Should your user account have sudo privileges
USER_PASSWORD=""                # The password for your user account
LOCALE=""                       # The Locale / language for your computer
TIMEZONE=""                     # The timezone of your computer

#
# Helper Functions
#
archroot() {
    # User-Friendly way to issue commands from outside the chroot
    flag=$@
    arch-chroot /mnt $flag
}

nspawn() {
    # User-Friendly way to start services from outside the chroot
    flag=$@
    systemd-nspawn -D /mnt -- systemctl enable $flag.service
}

catastrophic_failure() { # In the event of a catastrophic failure, display the error message
    argument=$@
    clear
    echo -e "Catastrophic Failure: ${argument}"
}

ping_fail() {
    clear
    prompt="Unfortunately an internet connection could not be established."
    prompt+="\nThe Arch installation process uses the network to download system packages."
    prompt+="\nIf you're using WiFi, please try 'iwctl station wlan0 connect <Network_SSID>'"
    prompt+="\nyou may need to change 'wlan0' to match your hardware."
    echo -e $prompt
}



#
# Actual Installation Steps taking place below here
#
init_test() { # Ensure that the host has an Internet Connection
    ping -c 1 google.com || ping_fail
    timedatectl && install # Begin the install
}

partition() {
  cat <<EOF | fdisk $DEVICE
g
n
1

+1G
t
1
n
2

+4G
t
2
swap
n
3


w
EOF
}

format() {
    mkfs.fat -F 32 $BOOT
    mkswap $SWAP
    mkfs.btrfs $ROOT
}

mount_parts() {
    mount $ROOT /mnt
    swapon $SWAP
    mkdir -p /mnt/boot/efi
    mount $BOOT /mnt/boot/efi
}

install_base() {
    pacstrap -K /mnt base base-devel linux linux-firmware linux-headers git go curl wget networkmanager grub efibootmgr $EDITOR
}

generate_fstab() {
    genfstab -U /mnt >> /mnt/etc/fstab
}

install_desktop() {
    case $DESKTOP in
        "KDE Plasma") 
            packages="plasma plasma-meta konsole dolphin sddm";;
        "Gnome") 
            packages="gnome gnome-extras gdm";;
        "XFCE4")
            packages="xfce4 xfce4-goodies";;
        "MATE")
            packages="mate mate-extra";;
        "Cinnamon")
            packages="cinnamon";;
        "None")
            packages="";;
    esac
    pacstrap -K /mnt $packages
}

set_rootpw() {
    archroot echo root:"${ROOT_PASSWORD}" | chpasswd
}

add_user() {
    archroot useradd -m -G wheel,audio,video $USER_NAME
    if [[ $USER_PASSWORD != "" ]]; then
        archroot echo $USER_NAME:$USER_PASSWORD | chpasswd
    fi
}

add_sudo() {
    archroot echo "${USER_NAME} ALL=(ALL:ALL) ALL" > /etc/sudoers.d/"00_$(USER_NAME)"
}

systemd_services() {
    nspawn NetworkManager
    nspawn "${DISPLAY_MANAGER}"
}

install_bootloader() {
    archroot grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id="Grub - Arch Linux"
    archroot grub-mkconfig -o /boot/grub/grub.cfg
}

generate_locale() {
    archroot sed -i '' /etc/locale.gen # TODO: FIX
    locale-gen
}

set_locale() {
    archroot echo "LANG=${LOCALE}.UTF-8" > /etc/locale.conf
}

set_timezone() {
    archroot ln -sf /usr/share/zoneinfo/${REGION}/${TIMEZONE} /etc/localtime
    hwclock --systohc # Sync Time / Date to new TimeZone
}

#
# Complete "Install" function that actually issues all the functions.
#  
install() {
    partition || catastrophic_failure "Partitioning Drive"
    format || catastrophic_failure "Formatting Partitions"
    mount_parts || catastrophic_failure "Mounting Partitions"
    install_base || catastrophic_failure "Installing Base"
    generate_fstab || catastrophic_failure "Generating FSTAB"
    install_desktop || catastrophic_failure "Installing Desktop"
    set_rootpw || catastrophic_failure "Setting Root Password"
    add_user || catastrophic_failure "Adding User"
    if [[ $USER_SUDO == true ]]; then
        add_sudo || catastrophic_failure "Adding User to Sudoers"
    fi
    systemd_services || catastrophic_failure "SystemD Services"
    install_bootloader || catastrophic_failure "Bootloader Installtion"
    generate_locale || catastrophic_failure "Generating Locale"
    set_locale || catastrophic_failure "Setting Locale"
    set_timezone || catastrophic_failure "Setting Timezone"
}
